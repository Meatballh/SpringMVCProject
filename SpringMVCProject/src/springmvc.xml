<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
		
		
		<!-- 将自己写的拦截器 配置到springmvc中（spring）;默认拦截全部请求 -->
		<mvc:interceptors>
			<!-- 配置具体的拦截路径 -->
			<mvc:interceptor>
				<!-- 指定拦截的路径 ，基于aut风格-->
				<mvc:mapping path="/**"/>
				<!-- 指定不拦截的路径 -->
				<mvc:exclude-mapping path="SpringMVCHandler/testInterceptor"/>
				<bean class="cn.edu.xit.interceptor.MyInterceptor"></bean>
				
			</mvc:interceptor>
			
			
						<!-- 配置具体的拦截路径 -->
			<mvc:interceptor>
				<!-- 指定拦截的路径 ，基于aut风格-->
				<mvc:mapping path="/**"/>
				<!-- 指定不拦截的路径 -->
				<mvc:exclude-mapping path="SpringMVCHandler/testInterceptor"/>
				<bean class="cn.edu.xit.interceptor.MySecondInterceptor"></bean>
			</mvc:interceptor>
		</mvc:interceptors>
		
		<!-- 扫描有注解的包 -->
		<context:component-scan base-package="cn.edu.xit.handler,cn.edu.xit.exception"></context:component-scan>
		
		<!-- 配置视图解析器 InternalResourceViewResolver -->
		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/views/"></property>
			<property name="suffix" value=".jsp"></property>
		</bean>
		
		<!-- 加载国际化资源文件 -->
		<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
			<property name="basename" value="i18n"></property>
		</bean>
		
		<!-- view-name会被视图解析器 加上前缀，后缀 -->
		<mvc:view-controller path="SpringMVCHandler/testMvcViewController" view-name="sucess"/>
		<!-- 此配置是SpringMvc的基础配置，很多功能都需要通过该注解来协调 
		<mvc:annotation-driven></mvc:annotation-driven>
		-->
		
		<!-- 该注解会让  SpringMvc:      接受一个请求，并且该请求没有对应的@requsetmapping时，将该请求交给服务器默认的servlet去处理（直接访问）
			处理静态资源（1）
		<mvc:default-servlet-handler/> -->
		
		<!-- 处理静态资源（2） 该配置方式效率更高，不需要考虑Web服务器的问题 -->
		<mvc:resources location="/imgs/" mapping="/imgs/**" />
		
		
		
		<!-- 1.将 自定义转换器纳入SpringIOC容器  -->
		<bean id="myConverter" class="cn.edu.xit.converter.MyConverter"></bean>
		
		<!-- 2.将myConverter再纳入SpringMVC提供的Bean中
		<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
			<property name="converters">
				<set>
					<ref bean="myConverter"/>
				</set>
			</property>
		
		</bean>
		 -->
		<!-- 3.将conversionService注册到annotation-driven -->
		<!-- 此配置是SpringMvc的基础配置，很多功能都需要通过该注解来协调 -->
		<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
		
		
		<!-- 配置数据格式化注解所依赖的bean 
		FormattingConversionServiceFactoryBean:既可以实现格式化，又可以实现类型转化（ConversionServiceFactoryBean和FormattingConversionServiceFactoryBean比较）
		-->
		<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"></bean>
		
		
		<!-- 配置CommonsMultipartResolver，用于实现文件上传；
		将其加入SpringIOC容器中
			SpringIOC容器在初始化是，会自动寻找一个id="multipartResolver"的bean，所以该处的id，不是乱取 -->
		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
			<property name="defaultEncoding" value="UTF-8"></property>
			<!-- 上传单个文件的最大值，单位Byte;如果-1，表示无限制 -->
			<property name="maxUploadSize"  value="10485760"></property>
		</bean>
		
</beans>
